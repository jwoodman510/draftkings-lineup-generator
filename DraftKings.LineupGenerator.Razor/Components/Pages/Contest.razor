@page "/contest/{id:int}"

@using BlazorBootstrap
@using DraftKings.LineupGenerator.Api.Draftables
@using DraftKings.LineupGenerator.Business.Interfaces
@using DraftKings.LineupGenerator.Models.Contests
@using DraftKings.LineupGenerator.Models.Lineups
@using DraftKings.LineupGenerator.Razor.Services

@inject IContestsClient ContestsClient;
@inject IContestService ContestService;
@inject NavigationManager NavigationManager;
@inject ILineupGeneratorService LineupGeneratorService;

@if (contest == null || contestSearchModel == null)
{
    <Button Color="ButtonColor.Primary" Loading="true" Style="margin:20px" />
}
else
{
    <div class="trash-container">
        <Button @onclick="RemoveContestAsync">
            <Icon Name="IconName.Trash3Fill" Size="IconSize.x3" />
        </Button>
    </div>
    <h3>@contest.ContestDetail.Name</h3>
    <div class="contest-detail">
        <p class="summary">@contest.ContestDetail.ContestSummary</p>
        <div class="row">
            <div class="col-sm-4">
                <b>Game Type: </b> @contestSearchModel.GameType
            </div>
            <div class="col-sm-4">
                <b>Entries: </b> @contest.ContestDetail.Entries / @contest.ContestDetail.MaxEntries
            </div>
            <div class="col-sm-4">
                <b>Start Time: </b> @contestSearchModel.StartDateTimeDecription
            </div>
        </div>
        <div class="row">
            <div class="col-sm-4">
                <b>Multi-Entries: </b> @contest.ContestDetail.MaximumEntriesPerUser
            </div>
            <div class="col-sm-4 money">
                <b>Entry Fee: </b> @contestSearchModel.EntryFee.ToString("C")
            </div>
            <div class="col-sm-4 money">
                <b>Prize Pool: </b> @contestSearchModel.Prizes.ToString("C")
            </div>
        </div>
    </div>
    <div class="actions">
        <Button Color="ButtonColor.Primary">Generate</Button>
    </div>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private ContestModel? contest;
    private ContestSearchModel? contestSearchModel;

    protected override async Task OnParametersSetAsync()
    {
        contestSearchModel = await ContestService.GetRecentContestAsync(Id);

        if (contestSearchModel == null)
        {
            NavigationManager.NavigateTo("/");
        }

        contest = await ContestsClient.GetAsync(Id, default);
    }

    private async Task RemoveContestAsync()
    {
        await ContestService.RemoveRecentContestAsync(Id);

        NavigationManager.NavigateTo("/", replace: true);
    }
}
