@page "/history"

@using BlazorBootstrap
@using DraftKings.LineupGenerator.Models.Lineups
@using DraftKings.LineupGenerator.Razor.Contests
@using DraftKings.LineupGenerator.Razor.Services
@using Newtonsoft.Json

@inject NavigationManager Navigation;
@inject IContestHistoryService ContestHistoryService;

<h1>History</h1>

<Grid @ref="grid"
      TItem="ContestHistoryModel"
      DataProvider="ContestHistoryDataProvider"
      Responsive="true"
      ItemsPerPageText="Items per page"
      PageSizeSelectorVisible="false"
      PaginationItemsTextFormat=""
      PageSizeSelectorItems="new int[0]"
      Class="table table-hover table-bordered table-striped">
    <GridColumn TItem="ContestHistoryModel" HeaderText="Name" PropertyName="Name" SortKeySelector="x => x.ContestModel.ContestDetail.Name">
        <a href="/" @onclick:preventDefault @onclick="@(() => ItemSelected(context))">@context.ContestModel.ContestDetail.Name</a>
    </GridColumn>
    <GridColumn TItem="ContestHistoryModel" HeaderText="Game Type" PropertyName="GameType" SortKeySelector="x => x.SearchModel.GameType">
        @context.SearchModel.GameType
    </GridColumn>
    <GridColumn TItem="ContestHistoryModel" HeaderText="Entry Fee" PropertyName="EntryFee" SortKeySelector="x => x.ContestModel.ContestDetail.EntryFee">
        @context.ContestModel.ContestDetail.EntryFee.ToString("C")
    </GridColumn>
    <GridColumn TItem="ContestHistoryModel" HeaderText="Generated At" PropertyName="UpdatedDateTime" SortKeySelector="x => x.UpdatedDateTime">
        @context.UpdatedDateTime.ToLocalTime().ToShortDateString() @@ @context.UpdatedDateTime.ToLocalTime().ToLongTimeString()
    </GridColumn>
    <GridColumn TItem="ContestHistoryModel" HeaderText="Results" PropertyName="Results" SortKeySelector="x => x.Results.Sum(y => y.Lineups.Count)">
        <Tooltip Title="@(JsonConvert.SerializeObject(context.RequestModel, Formatting.Indented))"
                 role="button" @onclick="@(() => ShowFiltersModalAsync(context))" Style="color:var(--orange)">
            @context.Results.Sum(y => y.Lineups.Count)
        </Tooltip>
    </GridColumn>
    <GridColumn TItem="ContestHistoryModel" HeaderText="Start Time" PropertyName="ContestStartTime" SortKeySelector="x => x.ContestModel.ContestDetail.ContestStartTime">
        @context.ContestModel.ContestDetail.ContestStartTime.ToLocalTime().ToShortDateString() @@ @context.ContestModel.ContestDetail.ContestStartTime.ToLocalTime().ToLongTimeString()
    </GridColumn>
    <GridColumn TItem="ContestHistoryModel" HeaderText="">
        <Button @onclick="@(() => DeleteItemAsync(@context))">
            <Icon Name="IconName.Trash3Fill" Size="IconSize.x5" />
        </Button>
    </GridColumn>
</Grid>
<Modal @ref="filtersModal" Size="ModalSize.ExtraLarge" Title="@(selectedItem?.ContestModel?.ContestDetail?.Name)">
    <BodyTemplate>
        @if (selectedItem != null)
        {
            <div class="row">
                <div class="col-6 col-lg-3">
                    <Switch Label="Include Questionable"
                            Disabled="true"
                            @bind-Value="selectedItem.RequestModel.IncludeQuestionable">
                    </Switch>
                </div>
                <div class="col-6 col-lg-3">
                    <Switch Label="Include Base Salary"
                            Disabled="true"
                            @bind-Value="selectedItem.RequestModel.IncludeBaseSalary">
                    </Switch>
                </div>
                <div class="col-6 col-lg-3">
                    <Switch Label="Exclude Defense"
                            Disabled="true"
                            @bind-Value="selectedItem.RequestModel.ExcludeDefense">
                    </Switch>
                </div>
                <div class="col-6 col-lg-3">
                    <Switch Label="Exclude Kickers"
                            Disabled="true"
                            @bind-Value="selectedItem.RequestModel.ExcludeKickers">
                    </Switch>
                </div>
            </div>
            <hr />
            <div class="row">
                <div class="col-6">
                    <label class="form-label">Lineup Count</label>
                    <NumberInput TValue="int" @bind-Value="selectedItem.RequestModel.LineupCount"
                                 Disabled="true"
                                 Placeholder="Lineup Count" EnableMinMax="true" Min="1" Max="100" />
                </div>
                <div class="col-6">
                    <label class="form-label">Min FPPG</label>
                    <NumberInput TValue="decimal" @bind-Value="selectedItem.RequestModel.MinFppg"
                                 Disabled="true"
                                 Placeholder="Min FPPG" EnableMinMax="true" Min="0" Max="decimal.MaxValue" />
                </div>
            </div>
            <hr />
            <div class="row">
                <div class="col-6">
                    <label class="form-label">Include Players</label>
                    <input class="form-control" disabled value="@(string.Join(',', selectedItem.RequestModel?.PlayerRequests?.PlayerNameRequests ?? new HashSet<string>()))" />
                </div>
                <div class="col-6">
                    <label class="form-label">Exclude Players</label>
                    <input class="form-control" disabled value="@(string.Join(',', selectedItem.RequestModel?.PlayerRequests?.PlayerNameExclusionRequests ?? new HashSet<string>()))" />
                </div>
            </div>
            @if (selectedItem.SearchModel?.GameType?.Contains("showdown", StringComparison.OrdinalIgnoreCase) == true)
            {
                <div class="row">
                    <div class="col-6">
                        <label class="form-label">Include Captains</label>
                        <input class="form-control" disabled value="@(string.Join(',', selectedItem.RequestModel?.PlayerRequests?.CaptainPlayerNameRequests ?? new HashSet<string>()))" />
                    </div>
                    <div class="col-6">
                        <label class="form-label">Exclude Captains</label>
                        <input class="form-control" disabled value="@(string.Join(',', selectedItem.RequestModel?.PlayerRequests?.CaptainPlayerNameExclusionRequests ?? new HashSet<string>()))" />
                    </div>
                </div>
            }
        }
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="HideFiltersModalAsync">Close</Button>
    </FooterTemplate>
</Modal>

@code {
    private Modal filtersModal = default!;
    private ContestHistoryModel? selectedItem = default;

    private Grid<ContestHistoryModel> grid = default!;
    private List<ContestHistoryModel>? history = null;

    private async Task<GridDataProviderResult<ContestHistoryModel>> ContestHistoryDataProvider(GridDataProviderRequest<ContestHistoryModel> request)
    {
        if (history == null)
        {
            history = (await ContestHistoryService.GetAsync())
                .OrderByDescending(x => x.UpdatedDateTime)
                .ToList();
        }

        return request.ApplyTo(history);
    }

    private async Task DeleteItemAsync(ContestHistoryModel item)
    {
        await ContestHistoryService.DeleteAsync(item);
        history?.Remove(item);
        await grid.RefreshDataAsync();
    }

    private void ItemSelected(ContestHistoryModel item)
    {
        Navigation.NavigateTo($"history/{item.Id}");
    }

    private async Task ShowFiltersModalAsync(ContestHistoryModel item)
    {
        selectedItem = item;
        await filtersModal.ShowAsync();
    }

    private async Task HideFiltersModalAsync()
    {
        selectedItem = null;
        await filtersModal.HideAsync();
    }
}