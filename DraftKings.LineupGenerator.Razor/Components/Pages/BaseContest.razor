@using BlazorBootstrap
@using DraftKings.LineupGenerator.Api.Draftables
@using DraftKings.LineupGenerator.Business.Interfaces
@using DraftKings.LineupGenerator.Models.Contests
@using DraftKings.LineupGenerator.Models.Lineups
@using DraftKings.LineupGenerator.Razor.Contests
@using DraftKings.LineupGenerator.Razor.Logging
@using DraftKings.LineupGenerator.Razor.Services

@implements IDisposable

@inject NavigationManager NavigationManager;
@inject ContestStateProvider ContestStateProvider;
@inject IRecentContestService RecentContestService;
@inject IContestHistoryService ContestHistoryService;

@if (state == null || state.ContestModel == null || searchModel == null)
{
    <Button Color="ButtonColor.Primary" Loading="true" Style="margin:20px" />
}
else
{
    <div class="trash-container">
        <Button @onclick="RemoveContestAsync" Disabled="state.IsRunning">
            <Icon Name="IconName.Trash3Fill" Size="IconSize.x3" />
        </Button>
    </div>
    <h3>@state.ContestModel.ContestDetail.Name</h3>
    <div class="actions">
        <Button Color="ButtonColor.Primary" @onclick="Generate" Disabled="state.IsRunning">Generate</Button>
        <Button Color="ButtonColor.Secondary" @onclick="Cancel" Disabled="!state.IsRunning">Cancel</Button>
    </div>
    <div class="contest-detail">
        <p class="summary">@state.ContestModel.ContestDetail.ContestSummary</p>
        <div class="row">
            <div class="col-sm-4">
                <b>Game Type: </b> @searchModel.GameType
            </div>
            <div class="col-sm-4">
                <b>Entries: </b> @state.ContestModel.ContestDetail.Entries / @state.ContestModel.ContestDetail.MaxEntries
            </div>
            <div class="col-sm-4">
                <b>Start Time: </b> @searchModel.StartDateTimeDecription
            </div>
        </div>
        <div class="row">
            <div class="col-sm-4">
                <b>Multi-Entries: </b> @state.ContestModel.ContestDetail.MaximumEntriesPerUser
            </div>
            <div class="col-sm-4 money">
                <b>Entry Fee: </b> @searchModel.EntryFee.ToString("C")
            </div>
            <div class="col-sm-4 money">
                <b>Prize Pool: </b> @searchModel.Prizes.ToString("C")
            </div>
        </div>
    </div>
    <div class="options-container">
        <hr />
        <div class="row">
            <div class="col-6 col-lg-3">
                <Switch Label="Include Questionable"
                        title="Filters players with a 'Questionable' status."
                        @bind-Value="state.RequestModel.IncludeQuestionable">
                </Switch>
            </div>
            <div class="col-6 col-lg-3">
                <Switch Label="Include Base Salary"
                        title="Filters players with the minimum salary for their roster slot."
                        @bind-Value="state.RequestModel.IncludeBaseSalary">
                </Switch>
            </div>
            <div class="col-6 col-lg-3">
                <Switch Label="Exclude Defense"
                        title="Excludes lineups with a 'Defense'."
                        @bind-Value="state.RequestModel.ExcludeDefense">
                </Switch>
            </div>
            <div class="col-6 col-lg-3">
                <Switch Label="Exclude Kickers"
                        title="Excludes lineups with a 'Kicker'."
                        @bind-Value="state.RequestModel.ExcludeKickers">
                </Switch>
            </div>
        </div>
        <hr />
        <div class="row">
            <div class="col-6">
                <label class="form-label">Lineup Count</label>
                <NumberInput TValue="int" @bind-Value="state.RequestModel.LineupCount"
                            title="The number of lineups each generator should create."
                             Placeholder="Lineup Count" EnableMinMax="true" Min="1" Max="100" />
            </div>
            <div class="col-6">
                <label class="form-label">Min FPPG</label>
                <NumberInput TValue="decimal" @bind-Value="state.RequestModel.MinFppg"
                             title="Filters players by their minimum fantasy points per game."
                             Placeholder="Min FPPG" EnableMinMax="true" Min="0" Max="decimal.MaxValue" />
            </div>
        </div>
        <hr />
        <div class="row">
            <div class="col-6">
                <label class="form-label">Include Players</label>
                <InputText @bind-Value="@playerInclusionRequests"
                           class="form-control"
                           title="Comma delimited list of players to include in lineups."/>
            </div>
            <div class="col-6">
                <label class="form-label">Exclude Players</label>
                <InputText @bind-Value="@playerExclusionRequests"
                           class="form-control"
                           title="Comma delimited list of players to exclude from lineups." />
            </div>
        </div>
        <hr />
        @if (state?.SearchModel?.GameType?.Contains("showdown", StringComparison.OrdinalIgnoreCase) == true)
        {
            <div class="row">
                <div class="col-6">
                    <label class="form-label">Include Captains</label>
                    <InputText @bind-Value="@captainInclusionRequests"
                               class="form-control"
                               title="Comma delimited list of captains to include in lineups." />
                </div>
                <div class="col-6">
                    <label class="form-label">Exclude Captains</label>
                    <InputText @bind-Value="@captainExclusionRequests"
                               class="form-control"
                               title="Comma delimited list of captains to exclude from lineups." />
                </div>
            </div>
        }
        <hr />
    </div>
    <div class="generator-progress">
        <Progress Class="mb-3">
            <ProgressBar Type="@(state?.IsRunning == true ? ProgressType.StripedAndAnimated : ProgressType.Default)" Color="ProgressColor.Dark" Width="@(state?.IsRunning == true ? 80 : state?.Results?.Count > 0 ? 100 : 0)" />
        </Progress>
        @foreach (var item in state?.Progress ?? Enumerable.Empty<(string, long iterationCount, long validLineupCount)>())
        {
            <div class="row">
                <div class="col-sm-1"></div>
                <div class="col-sm-5">
                    <b>Iterations: </b> @item.iterationCount.ToString("n0")
                </div>
                <div class="col-sm-5">
                    <b>Valid Lineups Found: </b> @item.validLineupCount.ToString("n0")
                </div>
                <div class="col-sm-1"></div>
            </div>
        }
        @if (state?.IsRunning == true)
        {
            <div class="logs">
                @foreach (var item in InMemorySink.LogEvents)
                {
                    <div>@item</div>
                }
            </div>
        }
    </div>
    @foreach (var lineupResult in state?.Results?.OrderBy(x => x.Description) ?? Enumerable.Empty<LineupsModel>())
    {
        <h4>Generator: @lineupResult.Description</h4>
        <div class="lineups-container row">
            @foreach (var lineup in lineupResult.Lineups)
            {
                <div class="lineup-container col-12 col-lg-6">
                    <div class="lineup-card">
                        <div class="row">
                            <div class="aggregate projected-points col-md-6">
                                <b>Projected Points: </b>@lineup.ProjectedFppg.ToString("F")
                            </div>
                            @if (lineup.Salary > 0)
                            {
                                <div class="aggregate salary col-md-6">
                                    <b>Salary: </b>@lineup.Salary.ToString("C")
                                </div>
                            }
                        </div>
                        @foreach (var draftable in lineup.Draftables)
                        {
                            <div class="row draftable">
                                <b class="col-2 col-md-2">
                                    @draftable.RosterPosition
                                </b>
                                <span class="col-4 col-md-4">
                                    @if (draftable.RosterPosition != draftable.Position)
                                    {
                                        <b>(@draftable.Position) </b>
                                    }
                                    <span>@draftable.FirstName @draftable.LastName</span>
                                </span>
                                <b class="projected-points col-2 col-md-3">
                                    @draftable.ProjectedFppg.ToString("F")
                                </b>
                                @if (draftable.Salary > 0)
                                {
                                    <b class="salary col-2 col-md-3">
                                        @draftable.Salary.ToString("C")
                                    </b>
                                }
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
    }
}

@code {
    private Timer? timer;
    private ContestState? state;
    private ContestSearchModel? searchModel;

    private string? playerInclusionRequests;
    private string? playerExclusionRequests;
    private string? captainInclusionRequests;
    private string? captainExclusionRequests;

    protected override void OnInitialized()
    {
        timer = new Timer(async _ =>
        {
            await InvokeAsync(StateHasChanged);
        }, null, 0, 10000);
    }

    protected virtual Task<ContestState?> GetOrCreateContestStateAsync()
    {
        return Task.FromResult<ContestState?>(null);
    }

    protected virtual Task<ContestSearchModel?> GetContestSearchModelAsync()
    {
        return Task.FromResult<ContestSearchModel?>(null);
    }

    protected virtual Task RemoveContestAsync()
    {
        return Task.CompletedTask;
    }

    protected override async Task OnParametersSetAsync()
    {
        state = await GetOrCreateContestStateAsync();
        searchModel = await GetContestSearchModelAsync();

        if (state?.ContestModel == null || searchModel == null)
        {
            await RemoveContestAsync();
        }

        playerInclusionRequests = GetPlayerRequests(state?.RequestModel?.PlayerRequests?.PlayerNameRequests);
        playerExclusionRequests = GetPlayerRequests(state?.RequestModel?.PlayerRequests?.PlayerNameExclusionRequests);
        captainInclusionRequests = GetPlayerRequests(state?.RequestModel?.PlayerRequests?.CaptainPlayerNameRequests);
        captainExclusionRequests = GetPlayerRequests(state?.RequestModel?.PlayerRequests?.CaptainPlayerNameExclusionRequests);

        if (state != null)
        {
            state.ResultsChanged -= UpdateContestHistoryAsync;
            state.ResultsChanged += UpdateContestHistoryAsync;

            if (searchModel != null)
            {
                state.SearchModel = searchModel;
            }
        }
    }

    private void Cancel()
    {
        state?.Cancel();
        StateHasChanged();
    }

    private void Generate()
    {
        if (state != null)
        {
            state.RequestModel.PlayerRequests = new PlayerRequestsModel
                {
                    PlayerNameRequests = ParsePlayerRequests(playerInclusionRequests),
                    PlayerNameExclusionRequests = ParsePlayerRequests(playerExclusionRequests),
                    CaptainPlayerNameRequests = ParsePlayerRequests(captainInclusionRequests),
                    CaptainPlayerNameExclusionRequests = ParsePlayerRequests(captainExclusionRequests)
                };

            state?.Generate();
        }

        StateHasChanged();
    }

    private string? GetPlayerRequests(HashSet<string>? values)
    {
        return values == null ? default : string.Join(',', values);
    }

    private HashSet<string> ParsePlayerRequests(string? input)
    {
        return input?.Split(',')
                    ?.Select(x => x.Trim())
                    ?.Where(x => !string.IsNullOrEmpty(x))
                    ?.ToHashSet(StringComparer.OrdinalIgnoreCase)
                    ?? new HashSet<string>();
    }

    private async void UpdateContestHistoryAsync(object? sender, ContestState contestState)
    {
        await InvokeAsync(StateHasChanged);

        var now = DateTime.UtcNow;
        var history = await ContestHistoryService.GetAsync(contestState.Id);

        if (history == null)
        {
            history = new ContestHistoryModel
            {
                Id = contestState.Id,
                SearchModel = contestState.SearchModel,
                ContestModel = contestState.ContestModel,
                RequestModel = contestState.RequestModel,
                Results = contestState.Results,
                CreatedDateTime = now,
                UpdatedDateTime = now
            };

            await ContestHistoryService.CreateAsync(history);
        }
        else
        {
            history.RequestModel = contestState.RequestModel;
            history.Results = contestState.Results;
            history.UpdatedDateTime = now;

            await ContestHistoryService.UpdateAsync(history);
        }
    }

    void IDisposable.Dispose()
    {
        timer?.Dispose();

        if (state != null)
        {
            state.ResultsChanged -= UpdateContestHistoryAsync;
        }
    }
}
