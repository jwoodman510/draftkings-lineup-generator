@using BlazorBootstrap
@using DraftKings.LineupGenerator.Models.Contests
@using DraftKings.LineupGenerator.Razor.Services

@implements IDisposable

@inject IContestService ContestService;
@inject NavigationManager NavigationManager;

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">DKGEN</a>
    </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <Icon Name="IconName.HouseDoor" Size="IconSize.x3" />
                <span class="nav-item-text">Home</span>
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="contests">
                <Icon Name="IconName.Search" Size="IconSize.x3" />
                <span class="nav-item-text">Contests</span>
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="history">
                <Icon Name="IconName.ClockHistory" Size="IconSize.x3" />
                <span class="nav-item-text">History</span>
            </NavLink>
        </div>
        @foreach (var contest in contests)
        {
            <div class="contest-nav-item nav-item px-3">
                <NavLink class="nav-link" href="@($"contest/{contest.Id}")">
                    <span class="nav-item-text">@contest.Name</span>
                </NavLink>
            </div>
        }
    </nav>
</div>
@code {
    private List<ContestSearchModel> contests = new List<ContestSearchModel>();

    protected override async Task OnInitializedAsync()
    {
        await UpdateContestsAsync();

        NavigationManager.LocationChanged += LocationChanged;
        base.OnInitialized();
    }

    async void LocationChanged(object sender, LocationChangedEventArgs e)
    {
        await UpdateContestsAsync();
    }

    async Task UpdateContestsAsync()
    {
        contests = (await ContestService.GetRecentContestsAsync()).ToList();
    }

    void IDisposable.Dispose()
    {
        // Unsubscribe from the event when our component is disposed
        NavigationManager.LocationChanged -= LocationChanged;
    }
}
